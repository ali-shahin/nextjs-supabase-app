name: Next.js CI/CD Pipeline
# This workflow sets up a CI/CD pipeline for a Next.js application.
# It includes steps for building, linting, testing, and deploying the application.
# The pipeline is triggered on pushes and pull requests to the 'stage' branch.
# The deployment step is conditional, only running on pushes to the 'stage' branch.
# The deployment can be customized to use Vercel or Docker, depending on your needs.

on:
  push:
    branches: [stage]
  pull_request:
    branches: [stage]

jobs:
  build:
    name: Setup & Build
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      node_modules_cache_key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: true
      matrix:
        lint-task: [eslint, prettier, types]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Run lint check - ${{ matrix.lint-task }}
        run: npm run lint:${{ matrix.lint-task }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .next

      - name: Run tests
        run: npm test

  docker:
    name: Dockerize App and Push to docker hub registry
    # This job builds the Docker image and pushes it to a Docker registry.
    # It runs only on pushes to the 'stage' branch after the build job.
    # The Docker image is built using the Next.js build artifact.
    # The image is tagged and pushed to a Docker registry (e.g., Docker Hub).
    # Ensure you have the necessary secrets set up in your GitHub repository.
    # Secrets required: DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, VERCEL_TOKEN
    if: github.event_name == 'push' && github.ref == 'refs/heads/stage'
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .next

      - name: Docker build
        run: docker build -t my-nextjs-app .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app

      - name: Build and push Docker image (commit and latest tags)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      # Optional: Vercel or custom deploy step
      - name: Deploy to Vercel
        run: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
#   # alternative, deploy directly to Vercel without pushing Docker image
#   deploy-to-vercel:
#     name: Deploy App to Vercel
#     # This job deploys the Next.js application to Vercel.
#     # It runs only on pushes to the 'stage' branch after the build job.
#     # Ensure you have the necessary secrets set up in your GitHub repository.
#     # Secrets required: VERCEL_TOKEN
#     runs-on: ubuntu-latest
#     needs: [build, test]
#     if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Use Node.js 20
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       - name: Restore node_modules from cache
#         uses: actions/cache@v4
#         with:
#           path: |
#             node_modules
#             ~/.npm
#           key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

#       - name: Download build artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: next-build
#           path: .next

#       - name: Docker build
#         run: docker build -t my-nextjs-app .

#       # Optional: Vercel or custom deploy step
#       # - name: Deploy to Vercel
#       #   run: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
